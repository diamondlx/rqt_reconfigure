### 用户CPP



+ rqt_reconfigure/src/topics/Server.hpp  

  Server模板类 <($name)RclConfigVec>  用户CPP需引用

+ rqt_reconfigure/src/topics/test_parameters.cpp  

  用户CPP的demo 

+ rqt_reconfigure/src/topics/cfg/Tutorials.cfg

  cfg文件 与ros1保持一致，拷贝parameter_generator_catkin.py 至同一目录，运行

  ```
  python3 Tutorials.cfg
  ```

  可产生 ($name)RclConfig.h 和 ($name)RclConfig.py 

+ rqt_reconfigure/src/topics/cfg/parameter_generator_catkin.py 

  将cfg文件变为CPP类与python类



###  用户python

+ zoro_utils/zoro_utils/zoro_utils/test.py

  用户python demo

+ zoro_utils/zoro_utils/zoro_utils/_init__.py

  python包的封装   原来zoro_utils有的 

+ zoro_utils/zoro_utils/zoro_utils/testRclConfig.py

  Tutorials.cfg 产生的python类



### dynamic_reconfigure

+ zoro_utils/zoro_utils/src/_zoro_utils.cpp

  中封装了python函数

  + zu.get_description(remote_name) 

    获取节点remote_name中cfg的description

  + zu.update_parameters(remote_name, in_dict)

     用in_dict更新节点remote_name中value

+ zoro_utils/zoro_utils/src/test_client.cpp

  用rclcpp::SyncParametersClient 实现Client类，提供

  + get_description()
  + get_values()
  + update_params()

  并实现Client_map类,管理Client实例，优化析构带来的延迟。

+ /home/lingxinli/rqt_reconfigure/zoro_utils/zoro_utils/zoro_utils/rqt_reconfigure/dynamic_reconfigure.py

  实现ros1中dynamic_reconfigure.client的部分功能 以及 dynamic_reconfigure.find_reconfigure_services() 都是rqt_reconfigure中必需的接口

### rqt_reconfigure

+ /home/lingxinli/rqt_reconfigure/zoro_utils/zoro_utils/zoro_utils/rqt_reconfigure

  qt界面 运行：

  ```
  python3 param_widget.py
  ```

  